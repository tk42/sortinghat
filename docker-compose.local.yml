services:
  api:
    build:
      context: api
      dockerfile: Dockerfile
    platform: linux/x86_64
    ports:
      - 3011:8000
    env_file:
      - api/.env
      - .env.local

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile.local
    platform: linux/x86_64
    volumes:
      - ./frontend:/app
    ports:
      - "3010:3000"
    env_file:
      - .env
      - .env.local

  graphql-engine:
    image: hasura/graphql-engine:v2.41.0
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
      - .env.local
    ports:
      - 8082:8080

  postgres:
    image: postgres:17
    restart: always
    env_file:
      - .env
      - .env.local
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d db"]
      interval: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  pgweb:
    image: sosedoff/pgweb
    ports:
      - 8081:8081

  migration:
    image: ghcr.io/tk42/goose:latest
    platform: linux/amd64
    env_file:
      - .env.local
      # - ../.env.production
      # - .env.qa
    working_dir: "/src"
    volumes:
      - "./backend/sql/schema:/src"
    depends_on:
      - postgres
    command: "up"

volumes:
  postgres_data:
